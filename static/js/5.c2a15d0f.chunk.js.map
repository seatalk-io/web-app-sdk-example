{"version":3,"sources":["App.tsx"],"names":["KitchenSink","React","lazy","App","useState","showConsole","setShowConsole","logs","setLogs","consoleRef","useRef","useEffect","Hook","window","console","log","currLogs","Unhook","current","scrollTop","scrollHeight","length","style","minHeight","className","size","checked","onChange","type","onClick","fallback","enable","top","right","bottom","left","topRight","bottomRight","bottomLeft","topLeft","bounds","boundsByDirection","defaultSize","width","height","minWidth","display","ref","styles","BASE_FONT_FAMILY","variant","filter","method","data"],"mappings":"gWAQMA,EAAcC,IAAMC,MAAK,kBAAM,uDA+FtBC,UA7FO,WACpB,MAAsCC,oBAAS,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAwBF,mBAAoB,IAA5C,mBAAOG,EAAP,KAAaC,EAAb,KACMC,EAAaC,iBAAuB,MAuB1C,OArBAC,qBAAU,WAMR,OALAC,eACEC,OAAOC,SACP,SAACC,GAAD,OAASP,GAAQ,SAACQ,GAAD,4BAAkBA,GAAlB,CAA4BD,UAC7C,GAEK,WAELE,iBAAOJ,OAAOC,YAEf,IAEHH,qBAAU,WACJF,EAAWS,UACbT,EAAWS,QAAQC,UAAYV,EAAWS,QAAQE,cAEhDb,EAAKc,QACPf,GAAe,KAEhB,CAACC,IAGF,qCACE,sBACEe,MAAO,CAAEC,UAAWlB,EAAc,yBAA2B,QAD/D,UAGE,qBAAKmB,UAAU,WAAf,SACE,oBAAOC,KAAK,QAAZ,UACE,6CAEE,mBAAQC,QAASrB,EAAasB,SAAUrB,OAE1C,mBAASsB,KAAK,aACd,mBACEH,KAAK,QACLI,QAAS,WAEPrB,EAAQ,KAJZ,gCAWJ,cAAC,WAAD,CAAUsB,SAAU,KAApB,SACE,cAAC9B,EAAD,SAGJ,cAAC,IAAD,CACE+B,OAAQ,CACNC,KAAK,EACLC,OAAO,EACPC,QAAQ,EACRC,MAAM,EACNC,UAAU,EACVC,aAAa,EACbC,YAAY,EACZC,SAAS,GAEXC,OAAO,SACPC,mBAAiB,EACjBC,YAAa,CAAEC,MAAO,OAAQC,OAAQ,OACtCC,SAAS,OACTtB,UAAU,MACVD,MAAO,CAAEwB,QAASzC,EAAc,QAAU,QAC1CmB,UAAU,UAjBZ,SAmBE,qBAAKuB,IAAKtC,EAAYe,UAAU,gBAAhC,SACE,cAAC,UAAD,CACEwB,OAAQ,CACNC,iBAAiB,sEAEnBC,QAAQ,OAER3C,KAAMA,EAAK4C,QAAO,SAACpC,GAAS,IAAD,IACzB,QACiB,UAAfA,EAAIqC,QACc,4BAAlB,UAAArC,EAAIsC,YAAJ,eAAW,KACO,qBAAlB,UAAAtC,EAAIsC,YAAJ,eAAW","file":"static/js/5.c2a15d0f.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef, Suspense } from 'react';\nimport { Button, Space, Divider, Switch } from 'antd';\nimport { Console, Hook, Unhook } from 'console-feed';\nimport { Message } from 'console-feed/lib/definitions/Console';\nimport { Resizable } from 're-resizable';\n\nimport './App.css';\n\nconst KitchenSink = React.lazy(() => import('./KitchenSink'));\n\nconst App: React.FC = () => {\n  const [showConsole, setShowConsole] = useState(false);\n  const [logs, setLogs] = useState<Message[]>([]);\n  const consoleRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    Hook(\n      window.console,\n      (log) => setLogs((currLogs) => [...currLogs, log]),\n      false\n    );\n    return () => {\n      // @ts-ignore\n      Unhook(window.console);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (consoleRef.current) {\n      consoleRef.current.scrollTop = consoleRef.current.scrollHeight;\n    }\n    if (logs.length) {\n      setShowConsole(true);\n    }\n  }, [logs]);\n\n  return (\n    <>\n      <div\n        style={{ minHeight: showConsole ? 'max(70%, 100% - 300px)' : '100%' }}\n      >\n        <div className=\"controls\">\n          <Space size=\"small\">\n            <Space>\n              Show console\n              <Switch checked={showConsole} onChange={setShowConsole} />\n            </Space>\n            <Divider type=\"vertical\" />\n            <Button\n              size=\"small\"\n              onClick={() => {\n                // @ts-ignore\n                setLogs([]);\n              }}\n            >\n              Clear console\n            </Button>\n          </Space>\n        </div>\n        <Suspense fallback={null}>\n          <KitchenSink />\n        </Suspense>\n      </div>\n      <Resizable\n        enable={{\n          top: true,\n          right: false,\n          bottom: false,\n          left: false,\n          topRight: false,\n          bottomRight: false,\n          bottomLeft: false,\n          topLeft: false,\n        }}\n        bounds=\"parent\"\n        boundsByDirection\n        defaultSize={{ width: '100%', height: '30%' }}\n        minWidth=\"100%\"\n        minHeight=\"30%\"\n        style={{ display: showConsole ? 'block' : 'none' }}\n        className=\"console\"\n      >\n        <div ref={consoleRef} className=\"console-inner\">\n          <Console\n            styles={{\n              BASE_FONT_FAMILY: `source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace`,\n            }}\n            variant=\"dark\"\n            // @ts-ignore\n            logs={logs.filter((log) => {\n              return !(\n                log.method === 'debug' &&\n                log.data?.[0] === '[@seatalk/web-app-sdk]' &&\n                log.data?.[1] === '[BridgeWebview]'\n              );\n            })}\n          />\n        </div>\n      </Resizable>\n    </>\n  );\n};\n\nexport default App;\n"],"sourceRoot":""}