{"version":3,"sources":["reportWebVitals.ts","App.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","KitchenSink","React","lazy","App","useState","showConsole","setShowConsole","logs","setLogs","consoleRef","useRef","useEffect","Hook","window","console","log","currLogs","Unhook","current","scrollTop","scrollHeight","length","className","checked","onChange","fallback","ref","style","display","styles","BASE_FONT_FAMILY","variant","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sNAceA,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,6FCFRQ,EAAcC,IAAMC,MAAK,kBAAM,uDAyDtBC,EAvDO,WACpB,MAAsCC,oBAAS,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAwBF,mBAAoB,IAA5C,mBAAOG,EAAP,KAAaC,EAAb,KACMC,EAAaC,iBAAuB,MAuB1C,OArBAC,qBAAU,WAMR,OALAC,eACEC,OAAOC,SACP,SAACC,GAAD,OAASP,GAAQ,SAACQ,GAAD,4BAAkBA,GAAlB,CAA4BD,UAC7C,GAEK,WAELE,iBAAOJ,OAAOC,YAEf,IAEHH,qBAAU,WACJF,EAAWS,UACbT,EAAWS,QAAQC,UAAYV,EAAWS,QAAQE,cAEhDb,EAAKc,QACPf,GAAe,KAEhB,CAACC,IAGF,qCACE,qBAAKe,UAAU,WAAf,SACE,6CAEE,mBAAQC,QAASlB,EAAamB,SAAUlB,SAG5C,cAAC,WAAD,CAAUmB,SAAU,6CAApB,SACE,cAACzB,EAAD,MAEF,qBACE0B,IAAKjB,EACLa,UAAU,UACVK,MAAO,CAAEC,QAASvB,EAAc,QAAU,QAH5C,SAKE,cAAC,UAAD,CACEwB,OAAQ,CACNC,iBAAiB,sEAEnBC,QAAQ,OAERxB,KAAMA,UCnDhByB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1B7C,M","file":"static/js/main.facaa75a.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useState, useEffect, Suspense, useRef } from 'react';\nimport { Space, Switch } from 'antd';\nimport { Console, Hook, Unhook } from 'console-feed';\nimport { Message } from 'console-feed/lib/definitions/Console';\n\nimport './App.css';\n\nconst KitchenSink = React.lazy(() => import('./KitchenSink'));\n\nconst App: React.FC = () => {\n  const [showConsole, setShowConsole] = useState(false);\n  const [logs, setLogs] = useState<Message[]>([]);\n  const consoleRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    Hook(\n      window.console,\n      (log) => setLogs((currLogs) => [...currLogs, log]),\n      false\n    );\n    return () => {\n      // @ts-ignore\n      Unhook(window.console);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (consoleRef.current) {\n      consoleRef.current.scrollTop = consoleRef.current.scrollHeight;\n    }\n    if (logs.length) {\n      setShowConsole(true);\n    }\n  }, [logs]);\n\n  return (\n    <>\n      <div className=\"controls\">\n        <Space>\n          Show Console\n          <Switch checked={showConsole} onChange={setShowConsole} />\n        </Space>\n      </div>\n      <Suspense fallback={<pre>loading...</pre>}>\n        <KitchenSink />\n      </Suspense>\n      <div\n        ref={consoleRef}\n        className=\"console\"\n        style={{ display: showConsole ? 'block' : 'none' }}\n      >\n        <Console\n          styles={{\n            BASE_FONT_FAMILY: `source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace`,\n          }}\n          variant=\"dark\"\n          // @ts-ignore\n          logs={logs}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport reportWebVitals from './reportWebVitals';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}