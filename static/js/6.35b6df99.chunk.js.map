{"version":3,"sources":["KitchenSink.tsx"],"names":["getRandomInt","min","max","Math","ceil","floor","random","KitchenSink","useEffect","console","log","window","location","href","sdk","useState","images","setImages","fetchImageButton","createRef","fetchingImages","setFetchingImages","a","length","Promise","resolve","setTimeout","start","Date","now","files","url","onSuccess","file","push","size","type","diff","round","style","padding","onClick","token","message","title","okText","cancelText","onOk","onCancel","placement","urls","Array","fill","map","id","width","height","selectedIndex","maxSelect","className","wrap","i","count","shape","src","ref","loading","icon"],"mappings":"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","file":"static/js/6.35b6df99.chunk.js","sourcesContent":["import React, { useState, useEffect, createRef } from 'react';\nimport { Button, Tooltip, Space, Badge, Avatar } from 'antd';\nimport * as sdk from '@seatalk/web-app-sdk';\nimport { ImageObject } from '@seatalk/web-app-sdk/lib/types';\n\nimport './KitchenSink.css';\n\nfunction getRandomInt(min: number, max: number) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\nconst KitchenSink: React.FC = () => {\n  useEffect(() => {\n    console.log('window.location.href:', window.location.href);\n    console.log('sdk.clientInfo:', sdk.clientInfo);\n  }, []);\n\n  const [images, setImages] = useState<ImageObject[]>([]);\n\n  const fetchImageButton = createRef<HTMLElement>();\n  const [fetchingImages, setFetchingImages] = useState(false);\n  useEffect(() => {\n    (async () => {\n      if (images.length && fetchingImages) {\n        // Delay 300ms to allow the spinner on the button to show, as\n        // fetchImage() is not truly asynchronous under the hood, it blocks\n        // the JS main thread when executing.\n        await new Promise((resolve) => setTimeout(resolve, 300));\n        const start = Date.now();\n\n        const files: Blob[] = [];\n        for (const { url } of images) {\n          const file = await new Promise<Blob>((resolve) => {\n            sdk.fetchImage({\n              url,\n              onSuccess: resolve,\n            });\n          });\n          files.push(file);\n          console.log(`Blob (size: ${file.size}, type: ${file.type})`);\n        }\n\n        const diff = Date.now() - start;\n        console.log(\n          `It takes ${diff}ms to fetch ${files.length} image(s), ${Math.round(\n            diff / files.length\n          )}ms on average`\n        );\n        setFetchingImages(false);\n      }\n    })();\n  }, [images, fetchingImages]);\n\n  return (\n    <div style={{ padding: 20 }}>\n      <section>\n        <p>\n          <Button\n            type=\"primary\"\n            onClick={() => {\n              sdk.getSSOToken({\n                onSuccess: (token: string) => {\n                  console.log('SSO token:', token);\n                },\n              });\n            }}\n          >\n            getSSOToken\n          </Button>\n        </p>\n      </section>\n\n      <section>\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            sdk.toast({ message: 'test' });\n            setTimeout(() => {\n              sdk.toast({ message: 'test (delayed 3s)' });\n            }, 3000);\n          }}\n        >\n          toast\n        </Button>\n      </section>\n      <section>\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            sdk.showDialog({\n              title: 'Dialog Title',\n              message: 'Dialog message',\n              okText: 'Ok',\n              cancelText: 'Cancel',\n              onOk: () => {\n                sdk.toast({ message: 'onOk' });\n              },\n              onCancel: () => {\n                sdk.toast({ message: 'onCancel' });\n              },\n            });\n          }}\n        >\n          showDialog\n        </Button>\n      </section>\n      <section>\n        <Tooltip\n          placement=\"right\"\n          title={\n            <span>\n              Show 5 random images form{' '}\n              <a href=\"https://picsum.photos\">picsum.photos</a> (some of the\n              images could be invalid), followed by 1 invalid image, and then 4\n              animated gif images.\n            </span>\n          }\n        >\n          <Button\n            type=\"primary\"\n            onClick={() => {\n              sdk.showImages({\n                urls: [\n                  ...new Array(5).fill(0).map(() => {\n                    const id = getRandomInt(1, 1000);\n                    const width = getRandomInt(2, 7) * 100;\n                    const height = getRandomInt(2, 7) * 100;\n                    return `https://picsum.photos/id/${id}/${width}/${height}`;\n                  }),\n                  'https://google.com',\n                  'https://media.giphy.com/media/3o6Zt481isNVuQI1l6/giphy.gif',\n                  'https://media.giphy.com/media/mlvseq9yvZhba/giphy.gif',\n                  'https://media.giphy.com/media/jpbnoe3UIa8TU8LM13/giphy.gif',\n                  'https://media.giphy.com/media/C9x8gX02SnMIoAClXa/giphy.gif',\n                ],\n                selectedIndex: 4,\n              });\n            }}\n          >\n            showImages\n          </Button>\n        </Tooltip>\n      </section>\n\n      <section>\n        <Space>\n          <Button\n            type=\"primary\"\n            onClick={() => {\n              sdk.pickImages({\n                maxSelect: 30,\n                onSuccess: (files: ImageObject[]) => {\n                  setImages(\n                    files.map((file) => {\n                      console.log({\n                        width: file.width,\n                        height: file.height,\n                        url: file.url,\n                      });\n                      return file;\n                    })\n                  );\n                },\n              });\n            }}\n          >\n            pickImages\n          </Button>\n          {images.length > 0 && (\n            <Button onClick={() => setImages([])}>Reset</Button>\n          )}\n        </Space>\n        {images.length > 0 && (\n          <div className=\"images\">\n            <Space size=\"middle\" wrap>\n              {images\n                .map(({ url }) => url)\n                .map((url, i, urls) => (\n                  <span\n                    key={url}\n                    onClick={() => {\n                      sdk.showImages({ urls, selectedIndex: i });\n                    }}\n                  >\n                    <Badge count={i + 1}>\n                      <Avatar shape=\"square\" size={64} src={url} />\n                    </Badge>\n                  </span>\n                ))}\n            </Space>\n          </div>\n        )}\n      </section>\n\n      <section>\n        <Space>\n          <Button\n            ref={fetchImageButton}\n            type=\"primary\"\n            loading={fetchingImages}\n            onClick={() => {\n              if (!images.length) {\n                sdk.toast({ message: 'Please pickImages first' });\n                return;\n              }\n              setFetchingImages(true);\n            }}\n          >\n            fetchImage\n          </Button>\n        </Space>\n      </section>\n\n      <section>\n        <Space>\n          <Button\n            type=\"primary\"\n            onClick={() => {\n              sdk.shareAppLink({\n                icon: 'logo192.png',\n                onSuccess: () => sdk.toast({ message: 'onSuccess' }),\n                onCancel: () => sdk.toast({ message: 'onCancel' }),\n              });\n            }}\n          >\n            shareAppLink\n          </Button>\n        </Space>\n      </section>\n    </div>\n  );\n};\n\nexport default KitchenSink;\n"],"sourceRoot":""}